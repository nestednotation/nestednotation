#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("first-app:server");
const http = require("http");
const WebSocketServer = require("websocket").server;
const fs = require("fs");
const os = require("os");
const BMDatabase = require("../database.js");
const { MESSAGES } = require("../constants.js");

let prefixDir = ".";
const testPrefixFile = prefixDir + "/account/admin.dat";
if (!fs.existsSync(testPrefixFile)) {
  prefixDir = "..";
}

const accountDir = prefixDir + "/account";
const env = process.env.NODE_ENV || "development";
let hostaddress = "nestednotation.com";
if (env == "development") {
  require("dotenv").config({
    path: ".env.development",
  });
} else {
  require("dotenv").config({
    path: ".env.production",
  });
}

/**
 * Get port from environment and store in Express.
 */
//sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3000

var port = normalizePort(process.env.PORT || "3000");
var networkInterfaces = os.networkInterfaces();

if (typeof networkInterfaces["en0"] !== "undefined") {
  var listInterfaces = networkInterfaces["en0"];
  if (listInterfaces.length > 1) {
    for (var i = 0; i < listInterfaces.length; i++) {
      var candidate = listInterfaces[i]["address"];
      if (candidate.startsWith("192.168")) {
        hostaddress = candidate;
      }
    }
  }
}

app.set("port", port);

//networkInterfaces['en0'][1]['address'];
console.log("myip = " + hostaddress);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Websocket
 */
var httpServerForSocket = http.createServer();
httpServerForSocket.listen(process.env.WS_PORT);
var wsServer = new WebSocketServer({
  httpServer: httpServerForSocket,
});

wsServer.on("request", function (request) {
  const connection = request.accept(null, request.origin);
  connection.on("message", function (message) {
    messageHandle(connection, message);
  });
  connection.on("close", function (reasonCode, description) {
    var session = db.sessionTable.getById(connection.sessionId);
    if (session != null) {
      updateNumberOfConnectionForSession(session);
    }
  });
});

//time = 0 => immediately
function sendToClient(conn, time, messageId, value1, value2) {
  var obj = {
    t: time,
    m: messageId,
    v1: value1,
    v2: value2,
  };
  conn.sendUTF(JSON.stringify(obj));
}

function sendToAllClients(session, time, messageId, value1, value2) {
  var obj = {
    t: time,
    m: messageId,
    v1: value1,
    v2: value2,
  };
  wsServer.connections.forEach(function each(conn) {
    if (conn.sessionId == session.id) {
      conn.sendUTF(JSON.stringify(obj));
    }
  });
}

function sendToAllClientsWithDelay(
  session,
  timeDelay,
  messageId,
  value1,
  value2
) {
  var time = new Date().getTime() + timeDelay;
  sendToAllClients(session, time, messageId, value1, value2);
}

function sendToAllAdmins(session, time, messageId, value1, value2) {
  var obj = {
    t: time,
    m: messageId,
    v1: value1,
    v2: value2,
  };
  wsServer.connections.forEach(function each(conn) {
    if (conn.sessionId == session.id && conn.isAdmin) {
      conn.sendUTF(JSON.stringify(obj));
    }
  });
}

function sendToAllAdminsWithDelay(
  session,
  timeDelay,
  messageId,
  value1,
  value2
) {
  var time = new Date().getTime() + timeDelay;
  sendToAllAdmins(session, time, messageId, value1, value2);
}

function sendUpdateVotingToClient(conn, session) {
  var countDic = countVoteForSession(session);
  var timestamp = new Date().getTime();
  sendToClient(conn, 0, MESSAGES.MSG_UPDATE_VOTING, countDic, timestamp);
}

function countVoteForSession(session) {
  var listConn = wsServer.connections.filter(
    (conn) => conn.sessionId == session.id
  );
  var voteData = listConn.map((o) => o.currentVoteTo);
  var counts = {};

  for (var i = 0; i < voteData.length; i++) {
    var num = voteData[i];
    if (typeof num != "undefined" && num != -1) {
      counts[num] = counts[num] ? counts[num] + 1 : 1;
    }
  }
  return counts;
}

function startVotingForSessionWithDelay(session, timeDelay) {
  var sessionId = session.id;
  session.currentVotingDuration = session.votingDuration;
  session.currentBeginTimeStamp = new Date().getTime() + timeDelay;
  session.currentEndTimeStamp =
    session.currentBeginTimeStamp + session.currentVotingDuration * 1000;
  session.isVoting = true;
  session.isStandby = false;
  wsServer.connections.forEach(function each(conn) {
    if (conn.sessionId == sessionId) {
      conn.currentVoteTo = -1;
    }
  });

  sendToAllClients(
    session,
    0,
    MESSAGES.MSG_BEGIN_VOTING,
    session.currentEndTimeStamp,
    session.currentVotingDuration
  );

  //start voting data timer
  session.votingTimeStamp = 0;
  session.didSendStopVoting = false;
  session.votingTimer = setInterval(
    (session) => {
      session.votingTimeStamp += session.synTimeInterval * 1000;

      var countDic = countVoteForSession(session);
      var timestamp = new Date().getTime();
      sendToAllClients(
        session,
        0,
        MESSAGES.MSG_UPDATE_VOTING,
        countDic,
        timestamp
      );

      if (
        !session.didSendStopVoting &&
        session.votingTimeStamp >= (session.currentVotingDuration - 1) * 1000
      ) {
        stopVotingForSession(session);
        session.didSendStopVoting = true;
      }

      if (session.votingTimeStamp >= session.currentVotingDuration * 1000) {
        clearInterval(session.votingTimer);
        session.votingTimer = null;
      }
    },
    session.synTimeInterval * 1000,
    session
  );
}

function stopVotingForSession(session) {
  session.isStandby = true;
  session.isVoting = false;
  if (session.holdDuration > 0) {
    session.isHolding = true;
  }

  //stand by signal
  var votingData = countVoteForSession(session);
  var listId = Object.keys(votingData);
  var mostVoteCount = 0;
  var mostVoteRingId = 0;
  for (var i = 0; i < listId.length; i++) {
    var id = listId[i];
    if (id != -1) {
      var count = votingData[id];
      if (count > mostVoteCount) {
        mostVoteCount = count;
        mostVoteRingId = id;
      }
    }
  }

  session.setCurrentIndexTo(mostVoteRingId);
  sendToAllAdmins(
    session,
    0,
    MESSAGES.MSG_SELECT_HISTORY,
    session.history,
    session.historyIndex
  );
  if (!session.isPause) {
    var timestamp = new Date().getTime() + 1000 + 100;
    sendToAllClients(session, timestamp, MESSAGES.MSG_SHOW, mostVoteRingId, 0);
  }

  //unlock
  session.standbyTimer = setTimeout(
    function (session) {
      session.isStandby = false;
      if (session.holdDuration > 0) {
        startHoldingForSessionWithDelay(session, 0);
      }
      session.standbyTimer = null;
    },
    1000,
    session
  );
}

function startHoldingForSessionWithDelay(session, delay) {
  session.isHolding = true;
  sendToAllAdmins(session, 0, MESSAGES.MSG_CHECK_HOLD, session.isHolding, 0);
  //holding cooldown
  session.currentHoldingDuration = session.holdDuration;
  session.currentBeginHoldTimeStamp = new Date().getTime() + delay;
  session.currentEndHoldTimeStamp =
    session.currentBeginHoldTimeStamp + session.currentHoldingDuration * 1000;
  sendToAllClients(
    session,
    0,
    MESSAGES.MSG_BEGIN_HOLDING,
    session.currentEndHoldTimeStamp,
    session.currentHoldingDuration
  );

  //unlock
  session.holdingTimer = setTimeout(
    function (session) {
      session.isHolding = false;
      sendToAllAdmins(
        session,
        0,
        MESSAGES.MSG_CHECK_HOLD,
        session.isHolding,
        0
      );
      session.holdingTimer = null;
    },
    session.holdDuration * 1000,
    session
  );
}

function stopSession(session) {
  //stop holding timer
  if (session.holdingTimer != null) {
    clearTimeout(session.holdingTimer);
    session.holdingTimer = null;
  }
  //stop standby timer
  if (session.standbyTimer != null) {
    clearTimeout(session.standbyTimer);
    session.standbyTimer = null;
  }
  //stop voting timer
  if (session.votingTimer != null) {
    clearInterval(session.votingTimer);
    session.votingTimer = null;
  }
  db.sessionTable.remove(session);

  sendToAllClientsWithDelay(session, 100, MESSAGES.MSG_FINISH, 0, 0);
  console.log("session stopped...");
}

function jumpScoreForSession(session, value) {
  if (session.isHolding && session.holdingTimer != null) {
    cancelHoldingTimer(session, 1);
  }
  if (session.standbyTimer) {
    clearTimeout(session.standbyTimer);
    session.standbyTimer = null;
  }
  if (session.isVoting && session.votingTimer != null) {
    cancelVotingTimer(session);
  }
  //---------
  var filename = session.history[value];
  var index = session.listFilesInLowerCase.indexOf(filename.toLowerCase());
  session.historyIndex = value;

  session.setCurrentIndexTo(index);
  sendToAllAdmins(
    session,
    0,
    MESSAGES.MSG_SELECT_HISTORY,
    session.history,
    session.historyIndex
  );
  if (!session.isPause) {
    var timestamp = new Date().getTime() + 100;
    sendToAllClients(session, timestamp, MESSAGES.MSG_SHOW, index, 0);
  }
}

function pauseSession(session, value) {
  session.isPause = value;
  sendToAllClients(session, 0, MESSAGES.MSG_PAUSE, value, session.currentIndex);
}

function cancelHoldingTimer(session, onOff) {
  clearTimeout(session.holdingTimer);
  session.holdingTimer = null;
  sendToAllClients(session, 0, MESSAGES.MSG_BEGIN_HOLDING, 0, onOff);
}

function cancelVotingTimer(session) {
  clearInterval(session.votingTimer);
  session.votingTimer = null;
  sendToAllClients(session, 0, MESSAGES.MSG_BEGIN_VOTING, 0, 0);
}

function updateNumberOfConnectionForSession(session) {
  var countPlayer = wsServer.connections.filter(
    (conn) => conn.sessionId == session.id && !conn.isAdmin && conn.isStaff
  ).length;
  var countRider = wsServer.connections.filter(
    (conn) => conn.sessionId == session.id && !conn.isAdmin && !conn.isStaff
  ).length;
  sendToAllAdmins(
    session,
    0,
    MESSAGES.MSG_SHOW_NUMBER_CONNECTION,
    countPlayer,
    countRider
  );
}

function messageHandle(conn, message) {
  var obj = JSON.parse(message.utf8Data);
  var sessionId = obj.sid;
  var clientIndex = obj.cid;
  var password = obj.sig;
  var msg = obj.msg;
  var value = obj.val;
  var session = db.sessionTable.getById(sessionId);
  if (session != null) {
    var isStaff =
      password == session.playerPassword || password == session.adminPassword
        ? true
        : false;
    var isAdmin = password == session.adminPassword ? true : false;

    if (msg == MESSAGES.MSG_PING) {
      var timeStamp = new Date().getTime();
      conn.sessionId = sessionId;
      conn.isAdmin = isAdmin;
      conn.isStaff = isStaff;
      sendToClient(conn, 0, msg, timeStamp, value);
    } else if (msg == MESSAGES.MSG_TAP) {
      if (
        !session.isHolding &&
        clientIndex == session.currentIndex &&
        !session.isPause &&
        value != -1
      ) {
        if (
          session.votingDuration == 0 ||
          session.listPreImages.includes(session.currentIndex)
        ) {
          session.setCurrentIndexTo(value);
          sendToAllAdmins(
            session,
            0,
            MESSAGES.MSG_SELECT_HISTORY,
            session.history,
            session.historyIndex
          );
          sendToAllClientsWithDelay(
            session,
            100,
            MESSAGES.MSG_SHOW,
            session.currentIndex
          );
          if (session.holdDuration > 0) {
            startHoldingForSessionWithDelay(session, 0);
          }
        } else {
          //change vote of client to new value
          if (!session.isStandby) {
            if (!session.isVoting) {
              startVotingForSessionWithDelay(session, 100);
            }
            conn.currentVoteTo = value;
            sendUpdateVotingToClient(conn, session);
          }
        }
      }
    } else if (msg == MESSAGES.MSG_SHOW) {
    } else if (msg == MESSAGES.MSG_NEED_DISPLAY) {
      if (!session.isPause) {
        sendToClient(conn, 0, MESSAGES.MSG_SHOW, session.currentIndex, 0);
      }
      if (session.isVoting) {
        conn.currentVoteTo = -1;
        sendToClient(
          conn,
          0,
          MESSAGES.MSG_BEGIN_VOTING,
          session.currentEndTimeStamp,
          session.currentVotingDuration
        );
      }
      if (session.isHolding) {
        sendToClient(
          conn,
          0,
          MESSAGES.MSG_BEGIN_HOLDING,
          session.currentEndHoldTimeStamp,
          session.currentHoldingDuration
        );
      }
      if (isAdmin) {
        sendToClient(
          conn,
          0,
          MESSAGES.MSG_SELECT_HISTORY,
          session.history,
          session.historyIndex
        );
      }
      updateNumberOfConnectionForSession(session);
      sendToAllClients(
        session,
        0,
        MESSAGES.MSG_CHECK_HOLD,
        session.isHolding,
        0
      );
      sendToAllClients(
        session,
        0,
        MESSAGES.MSG_PAUSE,
        session.isPause,
        session.currentIndex
      );
    } else if (msg == MESSAGES.MSG_UPDATE_VOTING) {
    } else if (msg == MESSAGES.MSG_CHECK_HOLD) {
      if (isAdmin) {
        if (session.isHolding && session.holdingTimer != null) {
          cancelHoldingTimer(session, 0);
        }
        session.isHolding = value;
        sendToAllClients(session, 0, MESSAGES.MSG_CHECK_HOLD, value, 0);
      }
    } else if (msg == MESSAGES.MSG_FINISH) {
      if (isAdmin) {
        stopSession(session);
      }
    } else if (msg == MESSAGES.MSG_PAUSE) {
      if (isAdmin) {
        pauseSession(session, value);
      }
    } else if (msg == MESSAGES.MSG_SELECT_HISTORY) {
      if (isAdmin) {
        jumpScoreForSession(session, value);
      }
    }
  }
}

/**
 * Tempo Database
 */

const db = new BMDatabase({ hostaddress });
db.adminUsername = "admin";
db.adminPassword = "g3tn3st3d";

const wsPort = process.env.WS_PORT || 8080;
const serverIp = process.env.SERVER_IP;
const wsPath = `wss://${serverIp}`;

console.log(`App is running on port ${wsPort}`);
console.log(`Websocket path is ${wsPath}`);

/**
 * Admin data
 */

const adminDataFile = accountDir + "/admin.dat";
if (fs.existsSync(adminDataFile)) {
  var contents = fs.readFileSync(adminDataFile, "utf8");
  var lines = contents.split("\n");

  for (var i = 0; i < lines.length; i++) {
    var id = lines[i].trim();
    var user = lines[i + 1].trim();
    var pass = lines[i + 2].trim();
    var isActive = lines[i + 3].trim();
    i += 3;
    db.admin.add(id, user, pass, isActive);
  }
} else {
  console.log("Cound not find admin.dat. Creating a new one");
  db.admin.add("1", "kip", "123", "1");
  db.admin.dumpToFile(adminDataFile);
}

/**
 * Config
 */

const configDataFile = accountDir + "/db.dat";
if (fs.existsSync(configDataFile)) {
  const contents = fs.readFileSync(configDataFile, "utf8");
  const lines = contents.split("\n");

  db.shouldAutoRedirect = lines[0].trim() == "1" ? true : false;
  db.autoRedirectSession = lines[1].trim();
  db.autoRedirectPassword = lines[2].trim();
} else {
  console.log("Cound not find db.dat. Creating a new one");
  db.shouldAutoRedirect = false;
  db.autoRedirectSession = "";
  db.autoRedirectPassword = "";
  db.dumpToFile(configDataFile);
}

//new session
const kip = db.admin.getByName("kip");
const ownerId = kip.id;
const folderName = "Serotonin-v2";
const displayName = "mcknight";
const adminPass = "managerpassword";
const playerPass = "mcknight";
db.wsPath = wsPath;

const session = db.sessionTable.add(
  ownerId,
  folderName,
  displayName,
  adminPass,
  playerPass
);
session.votingDuration = 0;
session.holdDuration = 0;

app.set("Database", db);
app.set("sendToAllClients", sendToAllClients);
app.set("sendToAllClientsWithDelay", sendToAllClientsWithDelay);
